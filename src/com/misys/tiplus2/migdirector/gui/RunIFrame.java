/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.misys.tiplus2.migdirector.gui;

import com.misys.tiplus2.migdirector.dao.MappingDAO;
import com.misys.tiplus2.migdirector.dao.NamespaceDAO;
import com.misys.tiplus2.migdirector.dao.RunDAO;
import com.misys.tiplus2.migdirector.dao.SettingsDAO;
import com.misys.tiplus2.migdirector.message.MigElement;
import com.misys.tiplus2.migdirector.object.CsvContent;
import com.misys.tiplus2.migdirector.object.CsvLine;
import com.misys.tiplus2.migdirector.util.EjbManager;
import com.misys.tiplus2.migdirector.util.FileUtil;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author falmarez
 */
public class RunIFrame extends javax.swing.JInternalFrame {
    
    private String message="";
    private String csvLocation="";
    private String expLocation="";
    Map<String,String> namespace;
    private boolean duplicateHeader = false;
    private boolean headerMatchColumn = true;
    private int runProgressValue = 0;
    
    Map settingsMap = new HashMap<String,String>();
    //private String 
    
    /**
     * Creates new form RunIFrame
     */
    public RunIFrame() {
        this.namespace = new HashMap<String,String>();
        initComponents();
        initCustomComponents();
        loadDB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel14 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        messageComboBox = new javax.swing.JComboBox();
        expDirectoryTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        csvDirectoryTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();
        ejbCheckBox = new javax.swing.JCheckBox();
        mqCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        selectExpDirButton = new javax.swing.JButton();
        selectCsvFileButton = new javax.swing.JButton();
        csvRecordsLabel = new javax.swing.JLabel();
        exportedXmlLabel = new javax.swing.JLabel();
        averageMessageLabel = new javax.swing.JLabel();
        errorsLabell = new javax.swing.JLabel();
        warningLabel = new javax.swing.JLabel();
        completedLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        runProgressTextArea = new javax.swing.JTextArea();
        runProgressBar = new javax.swing.JProgressBar();
        saveLogsButton = new javax.swing.JButton();

        jLabel14.setText("jLabel14");

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Run Migration");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        messageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        messageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageComboBoxActionPerformed(evt);
            }
        });

        expDirectoryTextField.setEnabled(false);
        expDirectoryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expDirectoryTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Message Name");

        jLabel2.setText("Export Directory");

        jLabel3.setText("CSV File");

        csvDirectoryTextField.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Run");

        stopButton.setText("Stop...");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        ejbCheckBox.setText("EJB");
        ejbCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejbCheckBoxActionPerformed(evt);
            }
        });

        mqCheckBox.setText("Websphere MQ");
        mqCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mqCheckBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Migrate via");

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel6.setText("Stats");

        jLabel8.setText("CSV Records:");

        jLabel9.setText("Exported XMLs:");

        jLabel7.setText("Avg Msg Proc (ms):");

        jLabel10.setText("Errors:");

        jLabel11.setText("Warning:");

        jLabel12.setText("Completed:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel13.setText("Logs");

        selectExpDirButton.setText("Select...");
        selectExpDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectExpDirButtonActionPerformed(evt);
            }
        });

        selectCsvFileButton.setText("Select...");
        selectCsvFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCsvFileButtonActionPerformed(evt);
            }
        });

        csvRecordsLabel.setText("0");

        exportedXmlLabel.setText("0");

        averageMessageLabel.setText("0");

        errorsLabell.setText("0");

        warningLabel.setText("0");

        completedLabel.setText("0");

        runProgressTextArea.setColumns(20);
        runProgressTextArea.setRows(5);
        jScrollPane1.setViewportView(runProgressTextArea);

        saveLogsButton.setText("Save Logs");
        saveLogsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLogsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(csvRecordsLabel)
                            .addComponent(exportedXmlLabel)
                            .addComponent(averageMessageLabel)
                            .addComponent(errorsLabell)
                            .addComponent(warningLabel)
                            .addComponent(completedLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(expDirectoryTextField)
                                    .addComponent(csvDirectoryTextField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectExpDirButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(selectCsvFileButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(messageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(109, 109, 109)
                                        .addComponent(ejbCheckBox)
                                        .addGap(18, 18, 18)
                                        .addComponent(mqCheckBox))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(stopButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(282, 282, 282)
                                        .addComponent(saveLogsButton)))))
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(selectExpDirButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(csvDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectCsvFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ejbCheckBox)
                        .addComponent(mqCheckBox)))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(csvRecordsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportedXmlLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(averageMessageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(errorsLabell))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(warningLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(completedLabel))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(saveLogsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageComboBoxActionPerformed
        
        Object selected = messageComboBox.getSelectedItem();
        
        if(!selected.toString().equals("None")){
            
            ejbCheckBox.setEnabled(true);
            mqCheckBox.setEnabled(true);
        
            //stopButton.setEnabled(true);
            startButton.setEnabled(true);
            
            //check if the there is a run that is not completed yet
            
        }
        else{
            ejbCheckBox.setEnabled(false);
            mqCheckBox.setEnabled(false);
        
            stopButton.setEnabled(false);
            startButton.setEnabled(false);
        }
        
        selectExpDirButton.setEnabled(true);
        selectCsvFileButton.setEnabled(true);
    }//GEN-LAST:event_messageComboBoxActionPerformed

    private void ejbCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejbCheckBoxActionPerformed
        // TODO add your handling code here:
        mqCheckBox.setSelected(false);
        
    }//GEN-LAST:event_ejbCheckBoxActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        loadSettingsFromDB();
        
        if(reqForRunComplete()){
        
        stopButton.setEnabled(true);
        startButton.setEnabled(false);
        
        selectCsvFileButton.setEnabled(false);
        selectExpDirButton.setEnabled(false);
        
        this.ejbCheckBox.setEnabled(false);
        this.mqCheckBox.setEnabled(false);
        messageComboBox.setEnabled(false);
        
        this.runProgressTextArea.append("Started run at ".concat(printTimeStamp()).concat("..\n"));
        
        this.runProgressTextArea.append("Retrieving mapping for ".concat(messageComboBox.getSelectedItem().toString()).concat("\n"));
        RunDAO runDao = new RunDAO();
        runDao.execute(messageComboBox.getSelectedItem().toString(),"A");
        
        MappingDAO mappingDao = new MappingDAO();
        ResultSet rs = mappingDao.retrieveDBContentsWithSource(messageComboBox.getSelectedItem().toString());
        
        try {

            Map<String,MigElement> migelement= new ConcurrentHashMap<String,MigElement>();
            
            while (rs.next()){
            
            String id = rs.getString("MAPITEMID");
            String source = rs.getString("SOURCE");
            String target = rs.getString("TARGET");
            String namespace = rs.getString("NAMESPACEID");
            String parent = rs.getString("PARENTID");
            boolean isBoolean = rs.getBoolean("ISBOOLEAN");
            boolean noValue = rs.getBoolean("NOVALUE");
            int targetLength =  rs.getInt("TARGETLEN");
            
            NamespaceDAO namespaceDao = new NamespaceDAO();
            ResultSet rsNs = namespaceDao.retrieveDBContents(namespace);
            rsNs.next();
            
            this.namespace.put(namespace, rsNs.getString("CHARPRESENT"));
            
            MigElement tempMig = new MigElement(id,target,source,rsNs.getString("CHARPRESENT"),parent,isBoolean,noValue,targetLength);
            
            //if parent detected set it as a child of the parent
            /*
            if(!parent.equals("None")){
                
            String parentId = parent.substring(parent.indexOf("(")+1);
            parentId = parentId.substring(0,parentId.length()-1); 
            migelement.get(parentId).addChild(id);

            }
            */
            migelement.put(id, tempMig);
          
            rsNs.close();
            
            }

            System.out.println("migelement size:"+migelement.entrySet().size());
            
            rs.close();
            mappingDao.closeResultSet();
            mappingDao.closeStatement();
            
             Map<String,MigElement> migelement2 = new HashMap<String,MigElement>();
             migelement2 = migelement;
             
             
            //2nd row
            for(Map.Entry<String,MigElement> entry1 : migelement2.entrySet()){
            
                String tempString = entry1.getValue().getParent();
                
                System.out.println("parentId:"+tempString);
               
                if(!tempString.equals("None")){
                tempString = tempString.substring(tempString.indexOf("(")+1,tempString.length()-1);
                
                System.out.println("parentId:"+tempString);
                
               
                MappingDAO mappingDao2 = new MappingDAO();
                ResultSet rs2 = mappingDao2.retrieveDBContentsThruId(tempString);
                
                while(rs2.next()){

                    String id = rs2.getString("MAPITEMID");
                    String source = rs2.getString("SOURCE");
                    String target = rs2.getString("TARGET");
                    String namespace = rs2.getString("NAMESPACEID");
                    String parent = rs2.getString("PARENTID");
                    boolean isBoolean = rs2.getBoolean("ISBOOLEAN");
                    boolean noValue = rs2.getBoolean("NOVALUE");
                    int targetLength =  rs2.getInt("TARGETLEN");
                     NamespaceDAO namespaceDao2 = new NamespaceDAO();
                    ResultSet rsNs2 = namespaceDao2.retrieveDBContents(namespace);
                    rsNs2.next();
            
                    this.namespace.put(namespace, rsNs2.getString("CHARPRESENT"));
                    
                    System.out.println("parent:"+parent);
                    
                     MigElement tempMig2 = new MigElement(id,target,source,rsNs2.getString("CHARPRESENT"),parent,isBoolean,noValue,targetLength);
                    
                     if(!"None".equals(parent)&&!parent.substring(1,parent.indexOf("(")).equals(messageComboBox.getSelectedItem().toString())){
                        parent = parent.substring(parent.indexOf("(")+1,parent.length()-1);
                        MappingDAO mappingDao3 = new MappingDAO();
                        ResultSet rs3 = mappingDao2.retrieveDBContentsThruId(parent);
                        rs3.next();
                        
                        String id3 = rs3.getString("MAPITEMID");
                        String source3 = rs3.getString("SOURCE");
                        String target3 = rs3.getString("TARGET");
                        String namespace3 = rs3.getString("NAMESPACEID");
                        String parent3 = rs3.getString("PARENTID");
                        boolean isBoolean3 = rs3.getBoolean("ISBOOLEAN");
                        boolean noValue3 = rs3.getBoolean("NOVALUE");
                        int targetLength3 =  rs3.getInt("TARGETLEN");
                         NamespaceDAO namespaceDao3 = new NamespaceDAO();
                        ResultSet rsNs3 = namespaceDao3.retrieveDBContents(namespace3);
                        rsNs3.next();
                        System.out.println(rs3.getString("TARGET"));
                         MigElement tempMig3 = new MigElement(id3,target3,source3,rsNs3.getString("CHARPRESENT"),parent3,isBoolean3,noValue3,targetLength3);
                         
                         migelement.put(id3, tempMig3);
                         rs3.close();
                         rsNs3.close();
                    }
                     
                     migelement.put(id, tempMig2);
                                        
                }
                
                }
            
            }
            
            System.out.println("migelement size after:"+migelement.entrySet().size());
            
            Map<String,MigElement> newMap = new HashMap<String,MigElement>();
            newMap = migelement;
            
            this.runProgressTextArea.append("Parsing CSV Contents\n");
            
            List<CsvLine> csvLine = parseCsvContents();
            
            //set VISUALS
            this.runProgressTextArea.append("Read ".concat(String.valueOf(csvLine.size())).concat(" records from the CSV file\n"));
            this.csvRecordsLabel.setText(String.valueOf(csvLine.size()));
            
            //output to a file and then directory
            if(csvLine.size()>0){
            
                if(duplicateHeader==false || !headerMatchColumn){
                    
                for(int z = 0;z<csvLine.size();z++){
                
              //  CsvLine tempLine = csvLine.get(z);
               
                //addvalue to the tag based on the source -- get from csv --loop on CSV record count
                //append elements to childs
              //  System.out.println("Starting factory");
                DocumentBuilderFactory docBuildFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder;
                docBuilder = docBuildFactory.newDocumentBuilder();
                Document newDoc = docBuilder.newDocument();

                Element rootElement = createServiceRequest(newDoc);
                
                newDoc.appendChild(rootElement);
                
                //set each item as an element and append child to each parent element

               // System.out.println("migelement size:"+migelement.entrySet().size());

                for(Map.Entry<String,MigElement> entry : newMap.entrySet()){

                    MigElement tempElement = entry.getValue();
                    tempElement.setElem(newDoc);
                    
                    System.out.println("newmap entrie:"+entry.getValue().getName());
                  //  System.out.println("getTempName:"+tempElement.getName());
                    //setCSVvaluehere
                   
                }

                
                 //appending of child(only done on the first loop in CSV)
                 for(Map.Entry<String,MigElement> entry : newMap.entrySet()){
                    
                    MigElement tempElement = entry.getValue();

                    
                    System.out.println("tempElement Name:"+tempElement.getName());
                    System.out.println("tempElement child size:"+tempElement.getChild().size());
                    System.out.println("tempElement parent:"+tempElement.getParent());
                    
                                          
                   // System.out.println("tempElement.getSource():"+tempElement.getSource());
                    String tagName = tempElement.getSource();
                    String tempVal ="";
                    if(tagName!=null&&tagName.length()>0){
                //     tempVal = tempLine.getContent().get(tempElement.getSource());
                    }
                   
                  
                    if(tempElement.getParent().equals("None")){
                        rootElement.appendChild(tempElement.getElem());
                       // System.out.println("tagNamexxx:"+tempElement.getElem().getTagName());
                    }
                    else{
                        
                        String parent = tempElement.getParent();
                        String parentId = parent.substring(parent.indexOf("(")+1,parent.length()-1);
                        newMap.get(parentId).addChild(parentId); 
                                         
                    }

                   // System.out.println("size of children:"+tempElement.getChild().size());                   

                 }

                 for(Map.Entry<String,MigElement> entry: newMap.entrySet())
                 {
                     int children = entry.getValue().getChild().size();
                     System.out.println("child size:"+children);
                     
                     String parentName = entry.getValue().getParent();
                        System.out.println("parentName:"+parentName);
                    
                    //append child to their parents
                    if(!parentName.equals("None")){  
                        parentName = parentName.substring(parentName.indexOf("(")+1,parentName.indexOf(")"));

                        String content = csvLine.get(z).getContent().get(entry.getValue().getSource());
                        
                        System.out.println("content:"+csvLine.get(0).getContent().get("COLUMN2"));
                        System.out.println("entry:"+entry.getValue().getName());
                        System.out.println("source:"+entry.getValue().getSource());
                        System.out.println("parent:"+newMap.get(parentName).getName());
                        
                        //input only if there is a content
                        if(content!=null)
                        {
                            entry.getValue().getElem().setTextContent(content);
                        }
                        
                        newMap.get(parentName).getElem().appendChild(entry.getValue().getElem());
                    }
                    else
                    {
                        rootElement.appendChild(entry.getValue().getElem());
                    }
                 }
                 

                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();

                DOMSource source = new DOMSource(newDoc);
                StringWriter strWriter = new StringWriter();
                StreamResult strResult = new StreamResult(strWriter);

                transformer.transform(source, strResult);

                System.out.println("result:"+strWriter.toString());
            
                FileUtil fUtil = new FileUtil();
                
                this.runProgressTextArea.append("Producing number ".concat(String.valueOf(z+1)).concat(" file...\n"));
                fUtil.saveToFile(this.expDirectoryTextField.getText(), strWriter.toString());
                
                }//end of for loop on csv
            
            }
            else{
                 
                    if(duplicateHeader){
                        JOptionPane.showMessageDialog(null, "Duplicate Header Columns! Please check CSV file!", "Run", 1);
                    }
                    if(!headerMatchColumn){
                        JOptionPane.showMessageDialog(null, "Number of Headers doesn't match Number of Records in CSV file!", "Run", 1);                    
                    }
                }
          
            
            }
            else{

                JOptionPane.showMessageDialog(null, "No Records in CSV file!", "Run", 1);
            
            }

            
      
        } catch (Exception ex) {
            Logger.getLogger(RunIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //read from directory upload to FBTI
        this.runProgressTextArea.append("Reading and Uploading Records to FBTI...\n");
        readAndUpload();
        
        //upload to FBTI
        
        }
        else
        {
         JOptionPane.showMessageDialog(null,"Make sure that the following has been selected: 'Export Directory', 'CSV File' and 'Migrate via'");
        }
        
    }//GEN-LAST:event_startButtonActionPerformed

    private void mqCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mqCheckBoxActionPerformed
        // TODO add your handling code here:
        ejbCheckBox.setSelected(false);
    }//GEN-LAST:event_mqCheckBoxActionPerformed

    private void expDirectoryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expDirectoryTextFieldActionPerformed
        // TODO add your handling code here:
       
        
    }//GEN-LAST:event_expDirectoryTextFieldActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        stopButton.setEnabled(false);
        startButton.setEnabled(true);
        
        mqCheckBox.setEnabled(true);
        ejbCheckBox.setEnabled(true);
        
        this.selectCsvFileButton.setEnabled(true);
        this.selectExpDirButton.setEnabled(true);
        
        messageComboBox.setEnabled(true);
        
        this.runProgressTextArea.append("Stopped the migration process at ".concat(printTimeStamp()).concat("...\n"));
        this.runProgressBar.setValue(0);
        
    }//GEN-LAST:event_stopButtonActionPerformed

    private void selectExpDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectExpDirButtonActionPerformed
        
        JFileChooser expDirChooser = new JFileChooser();
        expDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//        uploadChooser.setFileFilter(new FileNameExtensionFilter(".xsd"));
        int selected = expDirChooser.showOpenDialog(this);
        
        if(selected == JFileChooser.APPROVE_OPTION){
        File file = expDirChooser.getSelectedFile();
        expDirectoryTextField.setText(file.getAbsolutePath());        
        }
        
        
    }//GEN-LAST:event_selectExpDirButtonActionPerformed

    private void selectCsvFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCsvFileButtonActionPerformed
        
        JFileChooser csvFileChooser = new JFileChooser();
        csvFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
//        uploadChooser.setFileFilter(new FileNameExtensionFilter(".xsd"));
        int selected = csvFileChooser.showOpenDialog(this);
        
        if(selected == JFileChooser.APPROVE_OPTION){
        File file = csvFileChooser.getSelectedFile();
        csvDirectoryTextField.setText(file.getAbsolutePath());       
        }
        
        
    }//GEN-LAST:event_selectCsvFileButtonActionPerformed

    private void saveLogsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLogsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveLogsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel averageMessageLabel;
    private javax.swing.JLabel completedLabel;
    private javax.swing.JTextField csvDirectoryTextField;
    private javax.swing.JLabel csvRecordsLabel;
    private javax.swing.JCheckBox ejbCheckBox;
    private javax.swing.JLabel errorsLabell;
    private javax.swing.JTextField expDirectoryTextField;
    private javax.swing.JLabel exportedXmlLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JComboBox messageComboBox;
    private javax.swing.JCheckBox mqCheckBox;
    private javax.swing.JProgressBar runProgressBar;
    private javax.swing.JTextArea runProgressTextArea;
    private javax.swing.JButton saveLogsButton;
    private javax.swing.JButton selectCsvFileButton;
    private javax.swing.JButton selectExpDirButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables

    private void initCustomComponents() {
       //customComponents
        ejbCheckBox.setEnabled(false);
        mqCheckBox.setEnabled(false);
        
        stopButton.setEnabled(false);
        startButton.setEnabled(false);
        
        //load settings
        loadSettingsFromDB();
    }

    private void loadDB() {
        loadMessages();
        loadSettings();
    }
    
    private void loadMessages(){
        
        RunDAO runDao =  new RunDAO();
                
        if(!runDao.isTableEmptyMessage()){
        //table is not emtpty so populate
            ResultSet rs = runDao.retrieveDBContentsMessage();
            
            
            try {
                while(rs.next()){
                    messageComboBox.addItem(rs.getString("NAME"));         
                }
                
                runDao.closeResultSet();
                rs.close();
                
            } catch (SQLException ex) {
                Logger.getLogger(NamespaceIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
    }
    
    private void loadSettings(){
        //load the settings here
        SettingsDAO settingsDao = new SettingsDAO();
        
        if(!settingsDao.isTableEmpty()){
        //table is not emtpty so populate
            System.out.println("loadSettings called!");
            ResultSet rs = settingsDao.retrieveDBContents("XMLEXPORTDIR");
            
            try {
                rs.next();
                this.expLocation=rs.getString("VALUE");
                this.expDirectoryTextField.setText(this.expLocation);
                settingsDao.closeResultSet();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(RunIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            rs = settingsDao.retrieveDBContents("CSVDIR");
         try {
                rs.next();
                this.csvLocation=rs.getString("VALUE");
                this.csvDirectoryTextField.setText(this.csvLocation);
                settingsDao.closeResultSet();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(RunIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private Element createServiceRequest(Document newDoc) {
        
     Element rootElement = newDoc.createElement("a:ServiceRequest");
     String headerLetter = "";
        
        for(Map.Entry<String,String> entry:this.namespace.entrySet()){
            if(entry.getKey().equals("control.services")){
            headerLetter=entry.getValue();
            }

            rootElement.setAttribute("xmlns:".concat(entry.getValue()), "urn.".concat(entry.getKey()).concat(".ti.apps.tiplus2.misys.com"));
        }
        
        rootElement.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        
        Element requestHeader = newDoc.createElement(headerLetter.concat(":RequestHeader"));
        Element service = newDoc.createElement(headerLetter.concat(":Service"));
        Element operation  = newDoc.createElement(headerLetter.concat(":Operation"));
        Element credentials  = newDoc.createElement(headerLetter.concat(":Credentials"));
        Element name  = newDoc.createElement(headerLetter.concat(":Name"));
        Element replyFormat  = newDoc.createElement(headerLetter.concat(":replyFormat"));
        Element noRepair  = newDoc.createElement(headerLetter.concat(":NoRepair"));
        Element noOverride  = newDoc.createElement(headerLetter.concat(":NoOverride"));
        Element correlationId  = newDoc.createElement(headerLetter.concat(":CorrelationId"));
        Element transactionControl  = newDoc.createElement(headerLetter.concat(":TransactionControl"));
        
        rootElement.appendChild(requestHeader);
        requestHeader.appendChild(service);
        requestHeader.appendChild(operation);
        requestHeader.appendChild(credentials);
        requestHeader.appendChild(replyFormat);
        requestHeader.appendChild(noRepair);
        requestHeader.appendChild(noOverride);
        requestHeader.appendChild(correlationId);
        requestHeader.appendChild(transactionControl);
        
        credentials.appendChild(name);
        
        credentials.setTextContent("SUPERVISOR");
        
        return rootElement;

    }

    private List<CsvLine> parseCsvContents() {
    
    String csvDirectory = this.csvDirectoryTextField.getText();
    List<CsvLine> csvLine = new ArrayList<CsvLine>();
    System.out.println("csvDirectory:"+csvDirectory);
    Map<Integer,String> header = new HashMap<Integer,String>();
    List<String> headerCheck = new ArrayList<String>();
    
    int headerNum =0;
    int contentNum=0;
     
        try {
            
            String tempLine = "";
            
            BufferedReader buffReader = new BufferedReader(new FileReader(csvDirectory));
            
            int counter = 1;
            
            
            while((tempLine = buffReader.readLine())!=null){
                
                CsvLine line = new CsvLine();
                Map<String,String> content= new HashMap<String,String>();
                //split count header
                //tempLine
                String [] tempSeparate = tempLine.split(",");
                
                System.out.println("tempLine:" + tempLine);
                System.out.println("count:" + tempSeparate.length);
                
                for(int i=0;i<tempSeparate.length;i++){
                
                    //if header
                    if(counter==1){
                        
                        headerNum = tempSeparate.length;
                        if(!headerCheck.contains(tempSeparate[i])){
                            headerCheck.add(tempSeparate[i]);
                            header.put(i, tempSeparate[i]);
                        }
                        else{
                            duplicateHeader = true;
                        }
                    
                    }
                    else{
                    //
                        contentNum = tempSeparate.length;
                        if(contentNum!=headerNum){
                            headerMatchColumn = false;
                        }
                        
                        content.put(header.get(i),tempSeparate[i].replace("\"", ""));
                    
                    }
                
                }
                
                if(counter>1){
                line.setRecordNum(counter-1);
                line.setContent(content);
                csvLine.add(line);
                }
                
                counter++;
                //split count contents                               
            }            
            
            
            /*
            System.out.println("csvLine.size()"+csvLine.size());
            
            for(int k=0;k<csvLine.size();k++){
           
                CsvLine temp1Line = csvLine.get(k);
                System.out.println("line no:"+temp1Line.getRecordNum());
                
                for(Map.Entry<String,String> entry:temp1Line.getContent().entrySet()){
                    System.out.println("header:"+entry.getKey());
                    System.out.println("value:"+entry.getValue());
                }
            }
            */
            
        } catch (Exception ex) {
            Logger.getLogger(RunIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        return csvLine;
        
    }

    private void readAndUpload() {
        
        String location = this.expDirectoryTextField.getText();
        
        File newFile = new File(location);
        
        //list files in a directory
        File[] list = newFile.listFiles();
        
        //loop in the file
        for(int i=0;i<list.length;i++){
        
            //check if a file
            if(list[i].isFile()){
            
                try{
                File file = list[i];
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String line = null;
                StringBuilder  builder = new StringBuilder();
                
                try {
                    while((line = reader.readLine()) != null) {
                        builder.append(line.concat("\n"));
                    }

                } finally {
                    reader.close();
                }
                
                //send via ej
                if(this.ejbCheckBox.isSelected()==true&&this.mqCheckBox.isSelected()==false){
                    sendViaEjb(builder.toString());
                }
                if(this.ejbCheckBox.isSelected()==false&&this.mqCheckBox.isSelected()==true){
                    sendViaMq(builder.toString());
                }
                
                }catch(Exception e){
                    e.printStackTrace();
                }
                
                
            }
            
        }
        
    }

    private boolean reqForRunComplete() {
        boolean result = false;

        if(this.expDirectoryTextField.getText().length()>0&&this.csvDirectoryTextField.getText().length()>0&&(this.ejbCheckBox.isSelected()||this.mqCheckBox.isSelected())){
        
            File newFile = new File(this.expDirectoryTextField.getText());
            File newFile2 = new File(this.csvDirectoryTextField.getText());
            
            if(newFile.isDirectory()&&newFile2.isFile()){
            return true;
            }
            
        }
        
        
        return result;
    }

    private String printTimeStamp() {
        
        DateFormat dateFormat = new SimpleDateFormat("MMMM dd, yyyy HH:mm:ss");
        Date date = new Date();
        
        return dateFormat.format(date);
    }

    private void sendViaEjb(String argMessage) {
        
        EjbManager ejbManager = new EjbManager();
        ejbManager.send(argMessage);        
    }

    private void sendViaMq(String argMessage) {
        
        //MqManager mqManager = new MqManager(settingsMap.get("MQMACHINE").toString(),Integer.parseInt(settingsMap.get("MQPORT").toString()),settingsMap.get("MQQUEUE").toString(),settingsMap.get("MQQMGR").toString(),settingsMap.get("MQCHANNEL").toString());
        //mqManager.send(argMessage);
        
    }
    
    private void loadSettingsFromDB() {
        
       SettingsDAO settingsDAO = new SettingsDAO();

        if(!settingsDAO.isTableEmpty()){
        //table is not emtpty so populate
            ResultSet rs = settingsDAO.retrieveDBContents();
            

            
           try {
               
               while(rs.next()){
                settingsMap.put(rs.getString("NAME"),rs.getString("VALUE"));
               }   
           
           } catch (SQLException ex) {
               Logger.getLogger(SettingsIFrame.class.getName()).log(Level.SEVERE, null, ex);
           }
           
        }
    
    }
 
}
