/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.misys.tiplus2.migdirector.gui;

import com.misys.tiplus2.migdirector.dao.MappingDAO;
import com.misys.tiplus2.migdirector.dao.NamespaceDAO;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author falmarez
 */
public class MappingIFrame extends javax.swing.JInternalFrame {

   
    boolean editedField = false;
    boolean msgTypeSelected = false;
    ArrayList parentList = new ArrayList();
    JComboBox parentBox = new JComboBox();
    Map parentMap = new HashMap<String,String>();
    JFileChooser uploadChooser;
    
    public MappingIFrame() {
        initComponents();
        initCustomComponents();
        loadDB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mappingTable = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        messageComboBox = new javax.swing.JComboBox();
        addRowButton = new javax.swing.JButton();
        tiMessageTextField = new javax.swing.JTextField();
        deleteRowButton = new javax.swing.JButton();
        uploadXSDButton = new javax.swing.JButton();
        uploadXsdText = new javax.swing.JTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);
        setTitle("Mapping");
        setMaximumSize(new java.awt.Dimension(2147483647, 1147483647));
        setPreferredSize(new java.awt.Dimension(993, 500));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Mapping");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        jLabel2.setText("Message Name");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        mappingTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        mappingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Source", "Target", "Length", "Namespace", "Parent", "Is Boolean", "Can Contain Values"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mappingTable.setName(""); // NOI18N
        jScrollPane1.setViewportView(mappingTable);

        messageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        messageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageComboBoxActionPerformed(evt);
            }
        });

        addRowButton.setText("Add Row");
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowButtonActionPerformed(evt);
            }
        });

        tiMessageTextField.setEnabled(false);

        deleteRowButton.setText("Delete Row");
        deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowButtonActionPerformed(evt);
            }
        });

        uploadXSDButton.setText("Upload XSD...");
        uploadXSDButton.setEnabled(false);
        uploadXSDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadXSDButtonActionPerformed(evt);
            }
        });

        uploadXsdText.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 967, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(messageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tiMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(uploadXSDButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(uploadXsdText, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(deleteRowButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addRowButton)))))
                .addContainerGap())
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(messageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tiMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadXSDButton)
                    .addComponent(uploadXsdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteRowButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(editButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:

        if(fieldsHaveValue())
        {
            if(saveMappingTable()){
                JOptionPane.showMessageDialog(null, "Records have been saved!", "Insert", 1);
            }
        }
        else{
          JOptionPane.showMessageDialog(null, "Please make sure columns 'Target' and 'Namespace' have values!", "Insert", 1);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        // TODO add your handling code here:
        addRowTable();
    }//GEN-LAST:event_addRowButtonActionPerformed

    private void messageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageComboBoxActionPerformed
        
        Object selected = messageComboBox.getSelectedItem();
        
        if (buttonsEnabled()){
        disableButtons();
        }
        
        if(!selected.toString().equals("None")){
            
            deleteRows();
            editButton.setEnabled(true);
            msgTypeSelected =true;
            //get message
            try {
                MappingDAO mappingDao = new MappingDAO();
                ResultSet rs = mappingDao.retrieveDBContentsMessage(selected.toString());
                rs.next();    
                
                tiMessageTextField.setText(rs.getString("TINAME"));
                    
                mappingDao.closeStatement();
                rs.close();
               
            } catch (SQLException ex) {
                Logger.getLogger(NamespaceIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //get mapping
            
            String header[] = new String[] { "Source", "Target", "Length", "Namespace", "Parent", "IsBoolean", "Can't Contain Value" };
            
            try {
                MappingDAO mappingDao = new MappingDAO();
                ResultSet rs = mappingDao.retrieveDBContents(selected.toString());
                
                while(rs.next()){
                    
                    //display mapping in table
                    DefaultTableModel model = (DefaultTableModel) mappingTable.getModel();
                    model.setColumnIdentifiers(header);
                    model.addRow(new Object[]{rs.getString("SOURCE"),rs.getString("TARGET"),rs.getString("TARGETLEN"),rs.getString("NAMESPACEID"),rs.getString("PARENTID"),rs.getBoolean("ISBOOLEAN"),rs.getBoolean("NOVALUE")});
                }
                
                mappingDao.closeStatement();
                rs.close();
                
            } catch (SQLException ex) {
                Logger.getLogger(NamespaceIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            msgTypeSelected =false;
            
        }
        else{
            
            DefaultTableModel model = (DefaultTableModel) mappingTable.getModel();
            
            mappingTable.setEnabled(false);
            tiMessageTextField.setText("");
            disableButtons();
            
            deleteRows();
        }
       
    }//GEN-LAST:event_messageComboBoxActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        editedField = true;
        
        mappingTable.setEnabled(true);
        
        deleteRowButton.setEnabled(true);
        addRowButton.setEnabled(true);
        
        saveButton.setEnabled(true);
        
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowButtonActionPerformed
        // TODO add your handling code here:
        int rowSelected = mappingTable.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel) mappingTable.getModel();
      
        MappingDAO mappingDao = new MappingDAO();
        
        if(!mappingDao.isRowExisting(rowSelected+1,messageComboBox.getSelectedItem().toString())){
        mappingDao.execute(rowSelected, messageComboBox.getSelectedItem().toString(), "", model.getValueAt(rowSelected, 1).toString(), 0, "", "", "", "","");
        }
        model.removeRow(rowSelected);
        
    }//GEN-LAST:event_deleteRowButtonActionPerformed

    private void uploadXSDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadXSDButtonActionPerformed
        // TODO add your handling code here:
        uploadChooser = new JFileChooser();
        uploadChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
//        uploadChooser.setFileFilter(new FileNameExtensionFilter(".xsd"));
        int selected = uploadChooser.showOpenDialog(this);
        
        if(selected == JFileChooser.APPROVE_OPTION){
        File file = uploadChooser.getSelectedFile();
        uploadXsdText.setText(file.getAbsolutePath());
        
        
        
        }
        
        
    }//GEN-LAST:event_uploadXSDButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable mappingTable;
    private javax.swing.JComboBox messageComboBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField tiMessageTextField;
    private javax.swing.JButton uploadXSDButton;
    private javax.swing.JTextField uploadXsdText;
    // End of variables declaration//GEN-END:variables

    private void loadDB() {
        MappingDAO mappingDao =  new MappingDAO();
        
        mappingTable.setEnabled(false);
        editButton.setEnabled(false);
        disableButtons();
        
        if(!mappingDao.isTableEmptyMessage()){
        //table is not emtpty so populate
            ResultSet rs = mappingDao.retrieveDBContentsMessage();
            
            
            try {
                while(rs.next()){
                    messageComboBox.addItem(rs.getString("NAME"));         
                }
                
                mappingDao.closeResultSet();
                rs.close();
                
            } catch (SQLException ex) {
                Logger.getLogger(NamespaceIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }

    private void initCustomComponents() {
        
        //if(msgTypeSelected==false){
        //addRowTable();
        //}

        
        TableModelListener tml = new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                
                int rowNum = e.getFirstRow();
                int colNum = e.getColumn();
                
                System.out.println("rowNum:" + rowNum);
                System.out.println("colNum:" + colNum);
                
                if(colNum==1){
                    
                    TableModel model = (TableModel)e.getSource();
                    Object data = model.getValueAt(rowNum, colNum);
                    
                    System.out.println("model.getValueAt(rowNum, colNum):" + data.toString());
                    
                    MappingDAO mappingDao = new MappingDAO();
                    ResultSet rs = mappingDao.retrieveDBContents();
                    
                    parentMap = new HashMap<String,String>();
                    
                    try {
                        while(rs.next()){
                            parentMap.put(rs.getString("MAPITEMID"),rs.getString("MAPITEMID").concat(";").concat(rs.getString("TARGET")));
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(MappingIFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    //parentMap.put(parentMap.size()+1, data.toString());

                    parentBox.removeAllItems();
                    setParentBoxFromDB();
                    
                    
                /*
                    System.out.println("parentMap.size():" + parentMap.size());
                    
                    for(int i =1;i<=parentMap.size();i++){
                        System.out.println("parentMap.get("+i+")"+parentMap.get(i));
                        if(!parentMap.get(i).equals(" ")){
                        parentBox.addItem(parentMap.get(i));
                        }
                    }
                */
                    
                    
                }
                
                
            }
        };
        mappingTable.getModel().addTableModelListener(tml);
    }

    private void disableButtons() {
        
        deleteRowButton.setEnabled(false);
        addRowButton.setEnabled(false);
        saveButton.setEnabled(false);
        editButton.setEnabled(false);
        
    }

    private boolean fieldsHaveValue() {
        
       boolean result = true;
       
       TableModel model = mappingTable.getModel();
        int rowNum = model.getRowCount();
        int colNum = model.getColumnCount();

        for (int i = 0 ; i < rowNum ; i++){
            for (int j = 0 ; j < colNum ; j++){
            
             //System.out.println("i:" + i + " j:" + j + " " +model.getValueAt(i,j).toString());
             if((j==1 || j==3)&& model.getValueAt(i,j).toString().length()<1){
                 result = false;
                 break;
             }          
            }
        }

    return result;
    }
    
    private boolean saveMappingTable() {
        
        MappingDAO mappingDao = new MappingDAO();
    
        boolean result = false;
        
        TableModel model = mappingTable.getModel();
        int rowNum = model.getRowCount();
        int colNum = model.getColumnCount();

        for (int i = 0 ; i < rowNum ; i++){
            
            Object contents[] = new Object[colNum];
            
            for (int j = 0 ; j < colNum ; j++){

                contents[j] = model.getValueAt(i,j);
              
            }
           
            int tempMessageID = i + 1;
            String action = "";
            
           MappingDAO mappingDao2 = new MappingDAO();
           if(mappingDao2.isRowExisting(tempMessageID,messageComboBox.getSelectedItem().toString())){
           action = "U";
           }
           else{
           action="A";
           }
          
           result = mappingDao.execute(tempMessageID,messageComboBox.getSelectedItem().toString(),contents[0].toString(), contents[1].toString(), returnInteger(contents[2].toString()), contents[3].toString(), contents[4].toString(), contents[5].toString(), contents[6].toString(), action);
        }
    
    return result;
}

    private void enableButtons() {
        
        deleteRowButton.setEnabled(true);
        addRowButton.setEnabled(true);
        saveButton.setEnabled(true);
        editButton.setEnabled(true);
        
    }

    private void deleteRows() {
        
        DefaultTableModel model = (DefaultTableModel) mappingTable.getModel();
        int rowCount = mappingTable.getRowCount();
        int colCount = mappingTable.getColumnCount();
        
        if (rowCount>0){
            
            //addRowTable();
            for(int i=0;i<rowCount;i++){
                model.removeRow(0);
            }
            
            //set columns to ""
            if (rowCount==1)
            {
                for(int i=0;i<colCount;i++){
                    if(model.getColumnClass(i).getSimpleName().equals("Boolean")){
                    model.setValueAt(false,0 ,i);
                    }
                    else{
                    model.setValueAt("",0 ,i);
                    }
                }
                
            }
        }
        
    }
    
    private void addRowTable(){
        String header[] = new String[] { "Source", "Target", "Length", "Namespace", "Parent", "IsBoolean" };
        DefaultTableModel model = (DefaultTableModel) mappingTable.getModel();
        model.setColumnIdentifiers(header);
        mappingTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(genNamespaceBox()));
        mappingTable.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(genParentBox()));
        model.addRow(new Object[]{"","","","","",false});

    }
    
    private JComboBox genNamespaceBox(){
    
        JComboBox comboBox = new JComboBox();
        
       try {
                NamespaceDAO namespaceDao = new NamespaceDAO();
                ResultSet rs = namespaceDao.retrieveDBContents();
                
                while(rs.next()){
                comboBox.addItem(rs.getString("NAMESPACEID"));
                }
                
                namespaceDao.closeStatement();
                rs.close();
                
                
            } catch (SQLException ex) {
                Logger.getLogger(NamespaceIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
       
       return comboBox;
        
    }
    
    private JComboBox genParentBox(){
       setParentBoxFromDB();
       return parentBox;
    }
    
    private void setParentBoxFromDB(){
        
        parentBox.removeAllItems();
        
        parentBox.addItem("None");
        
        try {
                MappingDAO mappingDao = new MappingDAO();
                ResultSet rs = mappingDao.retrieveDBContents();
                
                while(rs.next()){    
                
                parentBox.addItem(rs.getString("TARGET").concat("(").concat(rs.getString("MAPITEMID").concat(")")));
                }
                
                mappingDao.closeStatement();
                rs.close();
               
            } catch (SQLException ex) {
                Logger.getLogger(NamespaceIFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    private int returnInteger(String argInteger){
    
    int integer= 0;
    
    if(argInteger.length()>0){
    integer = Integer.parseInt(argInteger);
    }
   
    return integer;
        
    }
    
    private boolean buttonsEnabled(){
    
    boolean result = false;    
    
    if (deleteRowButton.isEnabled()&&addRowButton.isEnabled()&&saveButton.isEnabled()){
    result = true;
    }
        
    return result;
    }
}
